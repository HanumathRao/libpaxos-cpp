// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "paxos++/detail/protocol/pb/command.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace paxos {
namespace detail {
namespace protocol {
namespace pb {

namespace {

const ::google::protobuf::Descriptor* command_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  command_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* command_type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_paxos_2b_2b_2fdetail_2fprotocol_2fpb_2fcommand_2eproto() {
  protobuf_AddDesc_paxos_2b_2b_2fdetail_2fprotocol_2fpb_2fcommand_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "paxos++/detail/protocol/pb/command.proto");
  GOOGLE_CHECK(file != NULL);
  command_descriptor_ = file->message_type(0);
  static const int command_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(command, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(command, host_id_),
  };
  command_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      command_descriptor_,
      command::default_instance_,
      command_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(command, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(command, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(command));
  command_type_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_paxos_2b_2b_2fdetail_2fprotocol_2fpb_2fcommand_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    command_descriptor_, &command::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_paxos_2b_2b_2fdetail_2fprotocol_2fpb_2fcommand_2eproto() {
  delete command::default_instance_;
  delete command_reflection_;
}

void protobuf_AddDesc_paxos_2b_2b_2fdetail_2fprotocol_2fpb_2fcommand_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n(paxos++/detail/protocol/pb/command.pro"
    "to\022\030paxos.detail.protocol.pb\"P\n\007command\022"
    "4\n\004type\030\001 \001(\0162&.paxos.detail.protocol.pb"
    ".command_type\022\017\n\007host_id\030\002 \001(\t*H\n\014comman"
    "d_type\022\022\n\016START_ELECTION\020\000\022\022\n\016MY_ELECTIO"
    "N_ID\020\001\022\020\n\014WON_ELECTION\020\002", 224);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "paxos++/detail/protocol/pb/command.proto", &protobuf_RegisterTypes);
  command::default_instance_ = new command();
  command::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_paxos_2b_2b_2fdetail_2fprotocol_2fpb_2fcommand_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_paxos_2b_2b_2fdetail_2fprotocol_2fpb_2fcommand_2eproto {
  StaticDescriptorInitializer_paxos_2b_2b_2fdetail_2fprotocol_2fpb_2fcommand_2eproto() {
    protobuf_AddDesc_paxos_2b_2b_2fdetail_2fprotocol_2fpb_2fcommand_2eproto();
  }
} static_descriptor_initializer_paxos_2b_2b_2fdetail_2fprotocol_2fpb_2fcommand_2eproto_;

const ::google::protobuf::EnumDescriptor* command_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return command_type_descriptor_;
}
bool command_type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int command::kTypeFieldNumber;
const int command::kHostIdFieldNumber;
#endif  // !_MSC_VER

command::command()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void command::InitAsDefaultInstance() {
}

command::command(const command& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void command::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  host_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

command::~command() {
  SharedDtor();
}

void command::SharedDtor() {
  if (host_id_ != &::google::protobuf::internal::kEmptyString) {
    delete host_id_;
  }
  if (this != default_instance_) {
  }
}

void command::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* command::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return command_descriptor_;
}

const command& command::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_paxos_2b_2b_2fdetail_2fprotocol_2fpb_2fcommand_2eproto();  return *default_instance_;
}

command* command::default_instance_ = NULL;

command* command::New() const {
  return new command;
}

void command::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_host_id()) {
      if (host_id_ != &::google::protobuf::internal::kEmptyString) {
        host_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool command::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .paxos.detail.protocol.pb.command_type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (paxos::detail::protocol::pb::command_type_IsValid(value)) {
            set_type(static_cast< paxos::detail::protocol::pb::command_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_host_id;
        break;
      }
      
      // optional string host_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_host_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->host_id().data(), this->host_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void command::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .paxos.detail.protocol.pb.command_type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional string host_id = 2;
  if (has_host_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host_id().data(), this->host_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->host_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* command::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .paxos.detail.protocol.pb.command_type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // optional string host_id = 2;
  if (has_host_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host_id().data(), this->host_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->host_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int command::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .paxos.detail.protocol.pb.command_type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional string host_id = 2;
    if (has_host_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void command::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const command* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const command*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void command::MergeFrom(const command& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_host_id()) {
      set_host_id(from.host_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void command::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void command::CopyFrom(const command& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool command::IsInitialized() const {
  
  return true;
}

void command::Swap(command* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(host_id_, other->host_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata command::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = command_descriptor_;
  metadata.reflection = command_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace protocol
}  // namespace detail
}  // namespace paxos

// @@protoc_insertion_point(global_scope)
